<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tgy.clouddisk.mapper.UserFileMapper">
    <resultMap id="BaseResultMap" type="com.tgy.clouddisk.entity.UserFile">
        <id column="file_id" property="fileId" jdbcType="INTEGER"/>
        <result column="user_id" property="userId" jdbcType="INTEGER"/>
        <result column="parent_id" property="parentId" jdbcType="INTEGER"/>
        <result column="origin_id" property="originId" jdbcType="INTEGER"/>
        <result column="file_name" property="fileName" jdbcType="VARCHAR"/>
        <result column="file_type" property="fileType" jdbcType="VARCHAR"/>
        <result column="file_status" property="fileStatus" jdbcType="TINYINT"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP"/>
        <result column="delete_time" property="deleteTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        file_id, user_id, parent_id, origin_id, file_name, file_type, file_status, create_time,
        modify_time, delete_time
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="model.UserFileExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from user_file
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from user_file
        where file_id = #{fileId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        DELETE FROM user_file
        WHERE file_id = #{fileId,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="model.UserFileExample">
        delete from user_file
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="model.UserFile" useGeneratedKeys="true" keyProperty="fileId">
        INSERT INTO user_file (file_id, user_id, parent_id,
                               origin_id, file_name, file_type,
                               file_status, create_time, modify_time,
                               delete_time)
        VALUES (#{fileId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{parentId,jdbcType=INTEGER},
                #{originId,jdbcType=INTEGER}, #{fileName,jdbcType=VARCHAR}, #{fileType,jdbcType=VARCHAR},
                #{fileStatus,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP}, #{modifyTime,jdbcType=TIMESTAMP},
                #{deleteTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="model.UserFile">
        insert into user_file
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="fileId != null">
                file_id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="parentId != null">
                parent_id,
            </if>
            <if test="originId != null">
                origin_id,
            </if>
            <if test="fileName != null">
                file_name,
            </if>
            <if test="fileType != null">
                file_type,
            </if>
            <if test="fileStatus != null">
                file_status,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="modifyTime != null">
                modify_time,
            </if>
            <if test="deleteTime != null">
                delete_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="fileId != null">
                #{fileId,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="parentId != null">
                #{parentId,jdbcType=INTEGER},
            </if>
            <if test="originId != null">
                #{originId,jdbcType=INTEGER},
            </if>
            <if test="fileName != null">
                #{fileName,jdbcType=VARCHAR},
            </if>
            <if test="fileType != null">
                #{fileType,jdbcType=VARCHAR},
            </if>
            <if test="fileStatus != null">
                #{fileStatus,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifyTime != null">
                #{modifyTime,jdbcType=TIMESTAMP},
            </if>
            <if test="deleteTime != null">
                #{deleteTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="model.UserFileExample" resultType="java.lang.Integer">
        select count(*) from user_file
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update user_file
        <set>
            <if test="record.fileId != null">
                file_id = #{record.fileId,jdbcType=INTEGER},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=INTEGER},
            </if>
            <if test="record.parentId != null">
                parent_id = #{record.parentId,jdbcType=INTEGER},
            </if>
            <if test="record.originId != null">
                origin_id = #{record.originId,jdbcType=INTEGER},
            </if>
            <if test="record.fileName != null">
                file_name = #{record.fileName,jdbcType=VARCHAR},
            </if>
            <if test="record.fileType != null">
                file_type = #{record.fileType,jdbcType=VARCHAR},
            </if>
            <if test="record.fileStatus != null">
                file_status = #{record.fileStatus,jdbcType=TINYINT},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.modifyTime != null">
                modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.deleteTime != null">
                delete_time = #{record.deleteTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update user_file
        set file_id = #{record.fileId,jdbcType=INTEGER},
        user_id = #{record.userId,jdbcType=INTEGER},
        parent_id = #{record.parentId,jdbcType=INTEGER},
        origin_id = #{record.originId,jdbcType=INTEGER},
        file_name = #{record.fileName,jdbcType=VARCHAR},
        file_type = #{record.fileType,jdbcType=VARCHAR},
        file_status = #{record.fileStatus,jdbcType=TINYINT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
        delete_time = #{record.deleteTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="model.UserFile">
        update user_file
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="parentId != null">
                parent_id = #{parentId,jdbcType=INTEGER},
            </if>
            <if test="originId != null">
                origin_id = #{originId,jdbcType=INTEGER},
            </if>
            <if test="fileName != null">
                file_name = #{fileName,jdbcType=VARCHAR},
            </if>
            <if test="fileType != null">
                file_type = #{fileType,jdbcType=VARCHAR},
            </if>
            <if test="fileStatus != null">
                file_status = #{fileStatus,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="modifyTime != null">
                modify_time = #{modifyTime,jdbcType=TIMESTAMP},
            </if>
            <if test="deleteTime != null">
                delete_time = #{deleteTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where file_id = #{fileId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="model.UserFile">
        UPDATE user_file
        SET user_id     = #{userId,jdbcType=INTEGER},
            parent_id   = #{parentId,jdbcType=INTEGER},
            origin_id   = #{originId,jdbcType=INTEGER},
            file_name   = #{fileName,jdbcType=VARCHAR},
            file_type   = #{fileType,jdbcType=VARCHAR},
            file_status = #{fileStatus,jdbcType=TINYINT},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            modify_time = #{modifyTime,jdbcType=TIMESTAMP},
            delete_time = #{deleteTime,jdbcType=TIMESTAMP}
        WHERE file_id = #{fileId,jdbcType=INTEGER}
    </update>


    <select id="getByPath" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_file
        where user_id = #{userId,jdbcType=INTEGER}
        and parent_id = #{parentId,jdbcType=INTEGER}
        and file_name like #{fileName,jdbcType=VARCHAR}
        and file_type = #{fileType,jdbcType=VARCHAR}
    </select>
    <!--<select id="listByFolderId" parameterType="map" resultMap="BaseResultMap">-->
        <!--select-->
        <!--<include refid="Base_Column_List"/>-->
        <!--from user_file-->
        <!--where user_id = #{userId,jdbcType=INTEGER}-->
        <!--and parent_id = #{parentId,jdbcType=INTEGER}-->
    <!--</select>-->
    <select id="listByParentId" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_file
        where user_id = #{userId,jdbcType=INTEGER}
        and parent_id = #{parentId,jdbcType=INTEGER}
    </select>
    <select id="listRecentFile" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_file
        where DATE_SUB(CURDATE(), INTERVAL 7 DAY) <![CDATA[<=]]> #{createTime,jdbcType=TIMESTAMP}
    </select>
    <select id="listByName" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_file
        where parent_id != 2 and parent_id != 3
        and user_id = #{userId,jdbcType=INTEGER}
        and concat(file_name, '.', file_type) like '%${name}%'
    </select>
    <select id="listByFileType" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_file
        where parent_id != 2
        and parent_id != 3
        and user_id = #{userId,jdbcType=INTEGER}
        and
        <foreach collection="fileTypes" item="fileType" open="(" close=")" separator=" or ">
            file_type = #{fileType,jdbcType=VARCHAR}
        </foreach>
    </select>
</mapper>