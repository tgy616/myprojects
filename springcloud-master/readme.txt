code introduction:
this is a projects which submit by me.



1、dubbo和SpringCloud的区别:
dubbo采用的是RPC协议进行通信，SpringCloud采用的是基于http的restful api进行通信。
（在性能上来说，由于Dubbo底层是使用Netty这样的NIO框架，是基于TCP协议传输的，配合以Hession序列化完成RPC。
而SpringCloud是基于Http协议+rest接口调用远程过程的，相对来说，Http请求会有更大的报文，占的带宽也会更多。）
2、微服务的优缺点
    优点：
    每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或者业务需求；
    开发简单、开发效率提高，一个服务可能就是专一的只干一件事；
    微服务能够被小团队单独开发，这个小团队是2到5人的开发人员组成
    微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或者部署阶段都是独立的
    微服务能使用不同的语言开发
    易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如Jenkins,Hudson,bamboo.
    微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果。无需通过合作才能体现价值。
    微服务允许你利用融合最新技术。
    微服务只是业务逻辑的代码，不会和HTML，CSS或者其他界面组件混合。
    每个微服务都有自己的存储能力，可以有自己的数据库。也可以有统一数据库。
    --------------------------
    缺点：
    开发人员要处理分布式系统的复杂性；
    多服务运维难度，随着服务的增加，运维的压力也在增大；
    系统部署依赖；
    服务间通讯成本
    数据一致性
    系统集成测试
    性能监控。。。

3、微服务面试题汇总
 1)什么是微服务
 2)微服务之间是如何独立通讯的
 3)SpringCloud和Dubbo有哪些区别



 4)SpringBoot和SpringCloud，请你谈谈对他们的理解
   SpringBoot专注于快速方便的开发单个个体微服务。
   SpringCloud是专注全局的微服务协调治理框架，它将SpringBoot开发的一个个简单微服务整合并管理起来，为各个微服务之间提供配置管理、
   服务发现、断路器、路由、微代理、时间总线、全局锁、决策竞选、分布式会话等等集成服务
   SpringBoot可以离开SpringCloud独立使用开发项目，但是SpringCloud离不开SpringBoot，属于依赖的关系。
   SpringBoot专注于快速、方便的开发单个微服务个体，SpringCloud关注全局的服务治理框架。
 5)什么是服务熔断？什么是服务降级
 6)微服务的优缺点分别是什么？说下你在项目开发中碰到的坑
 7)你所知道的微服务技术栈有哪些？请列举一二
    微服务技术栈是指多种技术的集合体
    ----------------------------------------------------------------------------------
    -------  微服务条目                            落地技术
    服务开发                                  --SpringBoot、spring、springMVC
    服务配置与管理                            --Netflix公司的Archaius、阿里的Diamond等
    服务注册与发现                            --Eureka、 Consul、Zookeeper等
    服务调用                                  --Rest、RPC、gRPC
    服务熔断器                                --Hystix、Envoy等
    负载均衡                                  --Ribbon、Nginx等
    服务接口调用（客服端调用服务的简化工具）  --Feign等
    消息队列                                  --Kafka、RabbitMQ、ActiveMQ等
    服务配置中心管理                          --SpringCloudConfig、Chef等
    服务路由（API网关）                       --Zuul等
    服务监控                                  --Zabbix、Nagios、Metrics、Spectator等
    全链路追踪                                --Zipkin、Brave、Dapper等
    服务部署                                  --Docker、OpenStack、Kubernetes等
    数据流操作开发包                          --SpringCloud Stream(封装与Redis,Rabbit、Kafka等发送接收消息)
    事件消息总线                              --Spring Cloud Bus
    。。。

 8)eureka和zookeeper都可以提供注册服务与发现功能，请说说两者的区别？

著名的CAP理论指出，一个分布式系统不可能同时满足C(一致性)、A(可用性)和P(分区容错性)。由于分区容错性在是分布式系统中必须要保证的，
因此我们只能在A和C之间进行权衡。在此Zookeeper保证的是CP, 而Eureka则是AP。

Zookeeper保证CP
当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，
服务注册功能对可用性的要求要高于一致性。但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。
问题在于，选举leader的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，
因网络问题使得zk集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。

Eureka保证AP
Eureka在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。
而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，
只不过查到的信息可能不是最新的(不保证强一致性)。除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，
那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：
1. Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务；
2. Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用) ；
3. 当网络稳定时，当前实例新的注册信息会被同步到其它节点中；

因此， Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪。

总结
Eureka作为单纯的服务注册中心来说要比zookeeper更加“专业”，因为注册服务更重要的是可用性，我们可以接受短期内达不到一致性的状况。
Eureka目前1.X版本的实现是基于servlet的java web应用，它的极限性能肯定会受到影响。期待正在开发之中的2.X版本能够从servlet中独立出来成为单独可部署执行的服务。
----------------------------------------------------------------------------------------------------------------------------------------------------------
========================================================================================================================
eureka是什么？
Eureka是Netflix开发的服务发现框架，本身是一个基于REST的服务，主要用于定位运行在AWS域中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。
SpringCloud将它集成在其子项目spring-cloud-netflix中，以实现SpringCloud的服务发现功能。


---------------------------------
码神>码龙>码牛>码工>码农>码畜>码畜>码渣
p10 >P9   >P8  >P7  >P6  >P5  >P4  >P3

Ribbon、Feign、Nginx的区别？

Ribbon是Netflix发布的负载均衡器，它有助于控制HTTP和TCP的客户端的行为。为Ribbon配置服务提供者地址后，Ribbon就可基于某种负载均衡算法，
自动地帮助服务消费者去请求。Ribbon默认为我们提供了很多负载均衡算法，例如轮询、随机等。当然，我们也可为Ribbon实现自定义的负载均衡算法。
在Spring Cloud中，当Ribbon与Eureka配合使用时，Ribbon可自动从Eureka Server获取服务提供者地址列表，并基于负载均衡算法，
请求其中一个服务提供者实例。展示了Ribbon与Eureka配合使用时的架构。
-----
Feign是Netflix开发的声明式、模板化的HTTP客户端， Feign可以帮助我们更快捷、优雅地调用HTTP API。
在Spring Cloud中，使用Feign非常简单——创建一个接口，并在接口上添加一些注解，代码就完成了。Feign支持多种注解，例如Feign自带的注解或者JAX-RS注解等。
Spring Cloud对Feign进行了增强，使Feign支持了Spring MVC注解，并整合了Ribbon和Eureka，从而让Feign的使用更加方便。
Spring Cloud Feign是基于Netflix feign实现，整合了Spring Cloud Ribbon和Spring Cloud Hystrix，除了提供这两者的强大功能外，还提供了一种声明式的Web服务客户端定义的方式。
Spring Cloud Feign帮助我们定义和实现依赖服务接口的定义。在Spring Cloud feign的实现下，只需要创建一个接口并用注解方式配置它，
即可完成服务提供方的接口绑定，简化了在使用Spring Cloud Ribbon时自行封装服务调用客户端的开发量。
Spring Cloud Feign具备可插拔的注解支持，支持Feign注解、JAX-RS注解和Spring MVC的注解。

































